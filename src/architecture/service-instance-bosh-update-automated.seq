seqdiag {
  # Change edge metrics
  edge_length = 150; // default value is 192
  span_height = 0;   // default value is 40

  # Change note color
  default_note_color = lightblue;

  # actors (in order left to right)
  Admin; Controller; Broker; Bosh; Service; IaaS;

  # trigger update of outdated service instances
  Admin ->> Broker [label = "trigger update of outdated deployments"] {
    Broker => Bosh [label = "download manifest(s)"]
    Broker ->> Controller [label = "trigger update", leftnote =
      "done to shift work away from broker
       and onto controller; controller will
       now do heavy-lifting like polling
       and preventing parallel operations", rightnote =
      "if a downloaded manifest differs from the computed manifest
       (incorporating the current settings like stemcells, releases
       and properties), but doesn't touch critical sections (disks),
       updates will be triggered automatically"]
  }
  Admin <<-- Broker [label = "ok"]

  # controller starts update
  Controller => Broker [label = "run update", return = "ok"] {
    Broker ->> Bosh [label = "bosh deploy"]
  }

  # bosh starts deployment
  Bosh => Service [label = "monit stop all"]
  Bosh => IaaS [label = "request/release resources"]

  # controller asks for last operation status
  Controller => Broker [label = "last operation?", return = "in progress"] {
    Broker => Bosh [label = "task state?", return = "processing"]
  }

  # bosh continues deployment
  Bosh => Service [label = "monit start all"]
  Broker <<-- Bosh [label = "deployment completed\nno actual callback"]

  # controller asks for last operation status
  Controller => Broker [label = "last operation?", return = "succeeded"] {
    Broker => Bosh [label = "task state?", return = "done"]
  }
  Broker <<-- Controller [label = "update completed\nno actual callback"]
}
