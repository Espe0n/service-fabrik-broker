seqdiag {
  # Change edge metrics
  edge_length = 150; // default value is 192
  span_height = 0;   // default value is 40

  # Change note color
  default_note_color = lightblue;

  # actors (in order left to right)
  User; Controller; Broker; APIServer; BOSHManager; Bosh; Service; IaaS;

  # trigger provisioning of service instance
  User ->> Controller [label = "cf update-service"] {
    Controller => Broker [label = "run provisioning", return = "ok"] {
      Broker => APIServer [label = "create lock resource on deployment", return = "true"];
      Broker => APIServer [label = "Update the director resource with state as update", return = "true"];
    }
  }

  APIServer -> BOSHManager [label = "Trigger watcher for new update request"]
  BOSHManager ->> Bosh [label = "bosh deploy"]
  BOSHManager -> APIServer [label = "sets resource state as in_progress", return = "true"];
        
  
  # bosh starts deployment
  Bosh => Service [label = "monit stop all"]
  Bosh => IaaS [label = "request/release resources"]

  # controller asks for last operation status
  Controller => Broker [label = "last operation?", return = "in progress"] {
    Broker => APIServer [label = "last operation of director resource?", return = "processing"]
  }

  BOSHManager -> BOSHManager [ label = "Start Poller" ];

  # BOSHManager asks for last operation status
  BOSHManager => Bosh [label = "task state?", return = "in progress"]
  BOSHManager => APIServer [label = "sets last operation as in progress"]

  # bosh continues deployment
  Bosh => Service [label = "monit start all"]
  BOSHManager <<-- Bosh [label = "deployment completed\nno actual callback"]

  # BOSHManager asks for last operation status
  BOSHManager => Bosh [label = "task state?", return = "succeeded"]
  BOSHManager => APIServer [label = "sets last operation as succeeded"]


  # controller asks for last operation status
  Controller => Broker [label = "last operation?", return = "succeeded"] {
    Broker => APIServer [label = "last operation state of director resource??", return = "succeeded"]
    Broker => APIServer [label = "remove the lock resource", return = "succeeded"]
  }

  User <<-- Controller [label = "update completed\nno actual callback"]
}
