mixin Badge(method)
    //- Draw a badge for a given HTTP method
    case method
        when 'GET'
            span.badge.get: i.fa.fa-arrow-down
        when 'HEAD'
            span.badge.head: i.fa.fa-info-circle
        when 'OPTIONS'
            span.badge.options: i.fa.fa-dot-circle-o
        when 'POST'
            span.badge.post: i.fa.fa-plus
        when 'PUT'
            span.badge.put: i.fa.fa-pencil
        when 'PATCH'
            span.badge.patch: i.fa.fa-pencil
        when 'DELETE'
            span.badge.delete: i.fa.fa-times
        default
            span.badge: i.fa.fa-dot-circle-o

mixin Nav()
    //- Draw a navigation bar, which includes links to individual
    //- resources and actions.
    each resourceGroup in self.api.resourceGroups || []
        .resource-group
            .heading
                .chevron
                    i.open.fa.fa-angle-down
                a(href=resourceGroup.elementLink)!= resourceGroup.name || 'Resource Group'
            .collapse-content
                ul
                    each item in resourceGroup.navItems || []
                        li
                            a(href=item[1])!= item[0]
                    each resource in resourceGroup.resources || []
                        li
                            if !self.condenseNav || (resource.actions.length != 1)
                                a(href=resource.elementLink)!= resource.name || 'Resource'
                                ul: each action in resource.actions || []
                                    li: a(href=action.elementLink)
                                        +Badge(action.method)
                                        != action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
                            else
                                - var action = resource.actions[0]
                                a(href=action.elementLink)
                                    +Badge(action.method)
                                    != action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
    //- Link to the API hostname, e.g. api.yourcompany.com
    each meta in self.api.metadata || {}
        if meta.name == 'HOST'
            p(style="text-align: center; word-wrap: break-word;")
                a(href=meta.value)= meta.value

mixin Parameters(params)
    //- Draw a definition list of parameter names, types, defaults,
    //- examples and descriptions.
    - var uri_params_exist = false
    each param in params || []
        if param.name.substr(0, 5) != 'BODY.'
            - uri_params_exist = true

    if uri_params_exist
        .title
            strong URI Parameters
        dl.inner: each param in params || []
            if param.name.substr(0, 5) != 'BODY.'
                dt= self.urldec(param.name)
                dd
                    code= param.type || 'string'
                    | &nbsp;
                    if param.required
                        span.required (required)
                    else
                        span (optional)
                    | &nbsp;
                    if param.default
                        span.text-info.default
                            strong Default:&nbsp;
                            span= param.default
                        | &nbsp;
                    != self.markdown(param.description)
                    if param.values.length
                        p.choices
                            strong Choices:&nbsp;
                            each value in param.values
                                code= self.urldec(value.value)
                                = ' '
        hr

mixin BodyParameters(params)
    //- Draw a definition list of parameter names, types, defaults,
    //- examples and descriptions.
    - var body_params_exist = false
    each param in params || []
        if param.name.substr(0, 5) === 'BODY.'
            - body_params_exist = true

    if body_params_exist
        .title
            strong Body Parameters
        dl.inner: each param in params || []
            if param.name.substr(0, 5) === 'BODY.'
                //dt= self.urldec(param.name.substr(5))
                dt= param.name.substr(5)
                dd
                    code= param.type || 'string'
                    | &nbsp;
                    if param.required
                        span.required (required)
                    else
                        span (optional)
                    | &nbsp;
                    if param.default
                        span.text-info.default
                            strong Default:&nbsp;
                            span= param.default
                        | &nbsp;
                    != self.markdown(param.description)
                    if param.values.length
                        p.choices
                            strong Choices:&nbsp;
                            each value in param.values
                                code= self.urldec(value.value)
                                = ' '

mixin RequestResponse(title, request, collapse, parameters)
    if title == 'Request'
        .title
            strong(style="font-size: 18px")
                = title
                if request.name
                    | &nbsp;&nbsp;
                    code= request.name
        +RequestResponseBody(request, false, false, parameters)
        +RequestResponseSchema(request, true)
    else
        .title
            strong(style="font-size: 16px")
                if request.name
                    | &nbsp;&nbsp;
                    code= request.name
                | &nbsp;
                span(style="font-weight: normal;")
                    | -&nbsp;
                    if request.name >= 300
                        = request.description
                    else
                        if parameters.length
                            | success (
                            = request.description
                            | )
                        else
                            | success

mixin ResponseSuccess(response)
    div(style="height: 10px")
    +RequestResponseBody(response, false, false, [])

mixin RequestResponseBody(request, collapse, showBlank, parameters)
    if request.hasContent || showBlank
        if request.description
            .description!= self.markdown(request.description)

        if parameters.length
            +BodyParameters(parameters)

        if Object.keys(request.headers).length
            h4 Headers
            pre: code
                each item, index in request.headers
                    != self.highlight(item.name + ': ' + item.value, 'http')
                    if index < request.headers.length - 1
                        br
            div(style="height: 1px;")
        if request.body
            h4 Example
            pre: code
                != self.highlight(request.body, null, ['json', 'yaml', 'xml', 'javascript'])
            div(style="height: 1px;")

mixin RequestResponseSchema(request, collapse, showBlank)
    if request.hasContent || showBlank
        div(): .inner
            if request.schema
                h4
                    | Schema
                    if collapse && request.schema
                        .collapse-button
                            span(style="font-weight: normal; float: right;").close Hide
                            span(style="font-weight: normal; float: right;").open Show
                div(class=collapse ? 'collapse-content' : ''): .inner
                    pre: code
                        != self.highlight(request.schema, null, ['json', 'yaml', 'xml'])
                    div(style="height: 1px;")
            if !request.hasContent
                .description.text-muted This response has no content.
                div(style="height: 1px;")

mixin Examples(resourceGroup, resource, action)
    each example in action.examples
        - var response_200 = false
        - var response_202 = false
        each request in example.requests
            +RequestResponse('Request', request, true, action.parameters)
            hr
        strong(style="font-size: 18px")
            | Response
        each response in example.responses
            if response.name === '200'
                - response_200 = true
            if response.name === '202'
                - response_202 = true
        each response in example.responses
            - var parameters = response_200 && response_202 && response.name === '200' ? ['description'] : []
            +RequestResponse('Response', response, true, parameters)
        each response in example.responses
            if response.name < 300
                if ((response.name === '200' && !response_202) || (response.name === '202'))
                    +ResponseSuccess(response)
                    +RequestResponseSchema(response, true)

mixin Content()
    //- Page header and API description
    header
        h1#top!= self.api.name || 'API Documentation'

    if self.api.descriptionHtml
        != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        section.resource-group(id=resourceGroup.elementId)
            h2.group-heading
                != resourceGroup.name || 'Resource Group'
                = " "
                a.permalink(href=resourceGroup.elementLink) &para;
            if resourceGroup.descriptionHtml
                != resourceGroup.descriptionHtml

            each resource in resourceGroup.resources || []
                .resource(id=resource.elementId)

                    if resource.description
                        != self.markdown(resource.description)

                    each action in resource.actions || []
                        .action(class=action.methodLower, id=action.elementId)
                            h4.action-heading
                                .name!= action.name
                                a.method(class=action.methodLower, href=action.elementLink)
                                    = action.method
                                code.uri= self.urldec(action.uriTemplate)
                            if action.description
                                != self.markdown(action.description)
                            +Parameters(action.parameters)

                            //- A list of sub-sections for parameters, requests
                            //- and responses.
                            if action.examples
                                +Examples(resourceGroup, resource, action)

mixin ContentTriple()
    h1 Not Implemented
